module Regex.Tests

open ARCtrl.Helper

open TestingUtils

let private tests_AutoGeneratedTableName = 
    testList "AutoGeneratedTableName" [
        testCase "match" (fun () ->
            let testString = @"New Table 10"
            let number = 
                match testString with
                | Regex.ActivePatterns.AutoGeneratedTableName num -> Some num
                | _ -> None
            Expect.isSome number "isSome"
            Expect.equal number.Value 10 ""
        )
        testCase "no match, no number" (fun () ->
            let testString = @"New Table Testing"
            let number = 
                match testString with
                | Regex.ActivePatterns.AutoGeneratedTableName num -> Some num
                | _ -> None
            Expect.isNone number ""
        )
        testCase "no match, wrong start" (fun () ->
            let testString = @"My New Table"
            let number = 
                match testString with
                | Regex.ActivePatterns.AutoGeneratedTableName num -> Some num
                | _ -> None
            Expect.isNone number ""
        )
        testCase "no match, wrong end mixed" (fun () ->
            let testString = @"New Table 10 x20"
            let number = 
                match testString with
                | Regex.ActivePatterns.AutoGeneratedTableName num -> Some num
                | _ -> None
            Expect.isNone number ""
        )
        testCase "no match, wrong end numbers" (fun () ->
            let testString = @"New Table 10 20"
            let number = 
                match testString with
                | Regex.ActivePatterns.AutoGeneratedTableName num -> Some num
                | _ -> None
            Expect.isNone number ""
        )
    ]

let private tests_AnnotationTableColums =
    testList "AnnotationTableColumns" [
        testCase "Term Source REF" (fun () ->
            let localID = "12345"
            let space = "UO"
            let testString = $"Term Source REF ({space}:{localID})"
            let r = 
                match testString with
                | Regex.ActivePatterns.TSRColumnHeader result -> Some result
                | _ -> None
            
            let rv = Expect.wantSome r "Could not match TSRColumnHeader"
            Expect.equal rv.LocalID localID "LocalId did not match"
            Expect.equal rv.IDSpace space "TermSourceREF did not match"
        )
        testCase "Term Source REF No Spaces" (fun () ->
            let localID = "12345"
            let space = "UO"
            let testString = $"Term Source REF({space}:{localID})"
            let r = 
                match testString with
                | Regex.ActivePatterns.TSRColumnHeader result -> Some result
                | _ -> None
            
            let rv = Expect.wantSome r "Could not match TSRColumnHeader"
            Expect.equal rv.LocalID localID "LocalId did not match"
            Expect.equal rv.IDSpace space "TermSourceREF did not match"
        )
        testCase "Term Source REF Two Spaces" (fun () ->
            let localID = "12345"
            let space = "UO"
            let testString = $"Term Source REF  ({space}:{localID})"
            let r = 
                match testString with
                | Regex.ActivePatterns.TSRColumnHeader result -> Some result
                | _ -> None
            
            let rv = Expect.wantSome r "Could not match TSRColumnHeader"
            Expect.equal rv.LocalID localID "LocalId did not match"
            Expect.equal rv.IDSpace space "TermSourceREF did not match"
        )
        testCase "Term Source REF Empty" (fun () ->
            let testString = $"Term Source REF ()"
            let r = 
                match testString with
                | Regex.ActivePatterns.TSRColumnHeader result -> Some result
                | _ -> None
            
            let rv = Expect.wantSome r "Could not match TSRColumnHeader"
            Expect.equal rv.LocalID "" "LocalID should be empty"
            Expect.equal rv.IDSpace "" "TermSourceREF should be empty"
        )
        testCase "Term Accession Number" (fun () ->
            let localID = "12345"
            let space = "UO"
            let testString = $"Term Accession Number ({space}:{localID})"
            let r = 
                match testString with
                | Regex.ActivePatterns.TANColumnHeader result -> Some result
                | _ -> None
            
            let rv = Expect.wantSome r "Could not match TANColumnHeader"
            Expect.equal rv.LocalID localID "LocalId did not match"
            Expect.equal rv.IDSpace space "TermSourceREF did not match"
        )
        testCase "Term Accession Number No Spaces" (fun () ->
            let localID = "12345"
            let space = "UO"
            let testString = $"Term Accession Number({space}:{localID})"
            let r = 
                match testString with
                | Regex.ActivePatterns.TANColumnHeader result -> Some result
                | _ -> None
            
            let rv = Expect.wantSome r "Could not match TANColumnHeader"
            Expect.equal rv.LocalID localID "LocalId did not match"
            Expect.equal rv.IDSpace space "TermSourceREF did not match"
        )
        testCase "Term Accession Number Empty" (fun () ->
            let testString = $"Term Accession Number ()"
            let r = 
                match testString with
                | Regex.ActivePatterns.TANColumnHeader result -> Some result
                | _ -> None
            
            let rv = Expect.wantSome r "Could not match TANColumnHeader"
            Expect.equal rv.LocalID "" "LocalID should be empty"
            Expect.equal rv.IDSpace "" "TermSourceREF should be empty"
        )
        testCase "Reference Column Header Empty" (fun () ->

            let testString = $"Term Accession Number ()"
            let r = 
                match testString with
                | Regex.ActivePatterns.ReferenceColumnHeader result -> Some result
                | _ -> None
            Expect.isSome r "Could not match TANColumnHeader"
            let rv = r.Value
            Expect.equal rv.Annotation "" "Annotation should be empty"

            let testString = $"Term Source REF ()"
            let r = 
                match testString with
                | Regex.ActivePatterns.ReferenceColumnHeader result -> Some result
                | _ -> None
            Expect.isSome r "Could not match TANColumnHeader"
            let rv = r.Value
            Expect.equal rv.Annotation "" "Annotation should be empty"

            let testString = $"Any Other String ()"
            let r = 
                match testString with
                | Regex.ActivePatterns.ReferenceColumnHeader result -> Some result
                | _ -> None
            Expect.isNone r "Should not match other String"
        )
        testCase "Parameter" (fun () ->
            let parameterName = "My Parameter"
            let testString = $"Parameter [{parameterName}]"
            let r = 
                match testString with
                | Regex.ActivePatterns.ParameterColumnHeader result -> Some result
                | _ -> None
            let rv = Expect.wantSome r "Could not match ParameterColumnHeader"
            Expect.equal rv parameterName "Header did not match"
        )
        testCase "Parameter No Spaces" (fun () ->
            let parameterName = "My Parameter"
            let testString = $"Parameter[{parameterName}]"
            let r = 
                match testString with
                | Regex.ActivePatterns.ParameterColumnHeader result -> Some result
                | _ -> None
            let rv = Expect.wantSome r "Could not match ParameterColumnHeader"
            Expect.equal rv parameterName "Header did not match"
        )
        testCase "Input" (fun () ->
            let ioType = "Data"
            let testString = $"Input [{ioType}]"
            let r = 
                match testString with
                | Regex.ActivePatterns.InputColumnHeader result -> Some result
                | _ -> None
            let rv = Expect.wantSome r "Could not match IOTypeColumnHeader"
            Expect.equal rv ioType "Header did not match"
        )
        testCase "Output No Spaces" (fun () ->
            let ioType = "Data"
            let testString = $"Output[{ioType}]"
            let r = 
                match testString with
                | Regex.ActivePatterns.OutputColumnHeader result -> Some result
                | _ -> None
            let rv = Expect.wantSome r "Could not match IOTypeColumnHeader"
            Expect.equal rv ioType "Header did not match"
        )
        testCase "Comment" (fun () ->
            let comment = "My Comment"
            let testString = $"Comment [{comment}]"
            let r = 
                match testString with
                | Regex.ActivePatterns.Comment result -> Some result
                | _ -> None
            let rv = Expect.wantSome r "Could not match CommentColumnHeader"
            Expect.equal rv comment "Header did not match"
        )
        testCase "Comment No Spaces" (fun () ->
            let comment = "My Comment"
            let testString = $"Comment[{comment}]"
            let r = 
                match testString with
                | Regex.ActivePatterns.Comment result -> Some result
                | _ -> None
            let rv = Expect.wantSome r "Could not match CommentColumnHeader"
            Expect.equal rv comment "Header did not match"
        )
    ]

let main = 
    testList "Regex" [
        tests_AnnotationTableColums
        tests_AutoGeneratedTableName
    ]

