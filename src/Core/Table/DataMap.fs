namespace ARCtrl

open System.Collections.Generic
open ARCtrl.Helper 
open ARCtrl
open Fable.Core


[<AttachMembers>]
module DataMapAux = 
    
    [<Literal>]
    let dataMapName = "DataMap"

    let dataHeader = CompositeHeader.Input IOType.Data

    [<Literal>]
    let dataShortHand = "Data"

    let explication = OntologyAnnotation("Clarification","NCIT","http://purl.obolibrary.org/obo/NCIT_C94778")

    [<Literal>]
    let explicationShortHand = "Explication"

    let explicationHeader = CompositeHeader.Parameter explication

    let unit = OntologyAnnotation("Unit","UO","http://purl.obolibrary.org/obo/UO_0000000")

    [<Literal>]
    let unitShortHand = "Unit"

    let unitHeader = CompositeHeader.Parameter unit

    let objectType = OntologyAnnotation("Data Type","NCIT","http://purl.obolibrary.org/obo/NCIT_C42645")

    let objectTypeHeader = CompositeHeader.Parameter objectType

    [<Literal>]
    let objectTypeShortHand = "Object Type"

    let descriptionHeader = CompositeHeader.FreeText "Description"

    [<Literal>]
    let descriptionShortHand = "Description"

    let generatedByHeader = CompositeHeader.FreeText "Generated By"

    [<Literal>]
    let generatedByShortHand = "Generated By"

    let allowedHeaders = 
        [dataHeader; explicationHeader; unitHeader; objectTypeHeader; descriptionHeader; generatedByHeader]

    let validate (headers : ResizeArray<CompositeHeader>) (values : System.Collections.Generic.Dictionary<int*int,CompositeCell>) (raiseException : bool) =  
        let headersAreValid = 
            headers
            |> Seq.exists (fun h -> 
                let hasForeignHeader =
                    not (allowedHeaders |> List.exists (fun ah -> ah = h))
                if raiseException && hasForeignHeader then
                    failwithf "Header %O is not allowed in DataMap" h
                hasForeignHeader
            )
        let tableIsValid = ArcTableAux.SanityChecks.validate headers values raiseException
        headersAreValid && tableIsValid

type DataMap(headers: ResizeArray<CompositeHeader>, values: System.Collections.Generic.Dictionary<int*int,CompositeCell>) = 
    
    let _ = DataMapAux.validate headers values true

    let table = ArcTable(DataMapAux.dataMapName, headers, values)
    let mutable staticHash = 0

    member this.Headers = table.Headers
    member this.Values = table.Values
    member this.StaticHash with get() = staticHash and set(value) = staticHash <- value

    static member init() = DataMap(ResizeArray(),Dictionary())

    member this.AddColumns(columns : CompositeColumn [], ?skipFillMissing : bool) =
        columns |> Array.iter (fun c -> c.Validate(true) |> ignore)
        table.AddColumns(columns, ?skipFillMissing = skipFillMissing)
        DataMapAux.validate table.Headers table.Values true |> ignore

    static member addColumns (columns : CompositeColumn [], ?skipFillMissing : bool) = 
        fun (dm : DataMap) -> 
            let dm : DataMap = dm.Copy()
            dm.AddColumns(columns, ?skipFillMissing = skipFillMissing)
            dm

    member this.Table = table

    member this.TryGetCellAt (row: int, column: int) = table.TryGetCellAt(row, column)

    member this.GetExplicationColumn() = 
        table.GetColumnByHeader(DataMapAux.explicationHeader)

    member this.AddExplicationColumn(cells : CompositeCell []) = 
        table.AddColumn(DataMapAux.explicationHeader, cells)

    member this.GetUnitColumn() = 
        table.GetColumnByHeader(DataMapAux.unitHeader)

    member this.AddUnitColumn(cells : CompositeCell []) =   
        table.AddColumn(DataMapAux.unitHeader, cells)

    member this.GetDataTypeColumn() =
        table.GetColumnByHeader(DataMapAux.objectTypeHeader)

    member this.AddDataTypeColumn(cells : CompositeCell []) =
        table.AddColumn(DataMapAux.objectTypeHeader, cells)

    member this.GetDescriptionColumn() =
        table.GetColumnByHeader(DataMapAux.descriptionHeader)

    member this.AddDescriptionColumn(cells : CompositeCell []) =
        table.AddColumn(DataMapAux.descriptionHeader, cells)

       
    member this.GetRow(row: int, ?SkipValidation) = table.GetRow(row,?SkipValidation = SkipValidation)

    static member getRow(row: int, ?SkipValidation) = 
        fun (dm : DataMap) -> dm.GetRow(row,?SkipValidation = SkipValidation)

    member this.Copy() =
        DataMap(
            ResizeArray(this.Headers), 
            Dictionary(this.Values)
        )

    override this.Equals(obj) = 
        match obj with
        | :? DataMap as dm -> 
            this.Table.Equals(dm.Table)
        | _ -> false

    override this.GetHashCode() = 
        this.Table.GetHashCode()